{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nBigArmLower_motor_a = Motor(Ports.PORT3, GearSetting.RATIO_36_1, False)\nBigArmLower_motor_b = Motor(Ports.PORT13, GearSetting.RATIO_36_1, True)\nBigArmLower = MotorGroup(BigArmLower_motor_a, BigArmLower_motor_b)\nBigArmUpper_motor_a = Motor(Ports.PORT4, GearSetting.RATIO_36_1, True)\nBigArmUpper_motor_b = Motor(Ports.PORT14, GearSetting.RATIO_36_1, False)\nBigArmUpper = MotorGroup(BigArmUpper_motor_a, BigArmUpper_motor_b)\nSmallArmLower_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_36_1, False)\nSmallArmLower_motor_b = Motor(Ports.PORT15, GearSetting.RATIO_36_1, True)\nSmallArmLower = MotorGroup(SmallArmLower_motor_a, SmallArmLower_motor_b)\nSmallArmUpper_motor_a = Motor(Ports.PORT6, GearSetting.RATIO_36_1, False)\nSmallArmUpper_motor_b = Motor(Ports.PORT16, GearSetting.RATIO_36_1, True)\nSmallArmUpper = MotorGroup(SmallArmUpper_motor_a, SmallArmUpper_motor_b)\ncontroller_1 = Controller(PRIMARY)\n# vex-vision-config:begin\nvision_20__YELLOW_GOAL = Signature(1, 47, 2501, 1274,-3381, -3063, -3222,5.8, 0)\nvision_20__RED_GOAL = Signature(2, 4571, 8739, 6654,-737, -69, -404,2.3, 0)\nvision_20__BLUE_GOAL = Signature(3, -2327, -1637, -1982,8519, 11565, 10042,3.4, 0)\nvision_20 = Vision(Ports.PORT20, 50, vision_20__YELLOW_GOAL, vision_20__RED_GOAL, vision_20__BLUE_GOAL)\n# vex-vision-config:end\nLeftDrive_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nLeftDrive_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nLeftDrive = MotorGroup(LeftDrive_motor_a, LeftDrive_motor_b)\nRightDrive_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, True)\nRightDrive_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, True)\nRightDrive = MotorGroup(RightDrive_motor_a, RightDrive_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n\n\n\n\n#endregion VEXcode Generated Robot Configuration\n\n#Variables\ngoal = None\ngoal_x = -999\ngoal_y = -999\nx_left = 180-20 #left boarder to decide whether to turn right\nx_right = 180+20 #right boarder to decide whether to turn left\ny_up = 200\ny_down = 100\nmax_width = 300\nforward_speed = 5  #this controls how fast the robots move forward to the goal\nrotate_speed = 5  #this controls how fast the robots rotate to search the goal\ngoal_color = \"yellow\"   #this controls which color goal the robots hunt for\n\n\ndef when_started1():\n    # Autonomous Testing\n    LeftDrive.set_stopping(COAST)\n    RightDrive.set_stopping(COAST)\n    LeftDrive.set_velocity(50,PERCENT)\n    RightDrive.set_velocity(50,PERCENT)\n    #LeftDrive.spin_for(FORWARD, 360, DEGREES, wait=False)\n\n    #wait(1,SECONDS)\n\n    brain.screen.print(\"Start detecting!\")\n    brain.screen.next_row()\n\n    while (True):\n        wait(0.5,SECONDS) #do not delete this line or the brain will have some trouble running the program too fast\n        brain.screen.set_cursor(1,1)\n        brain.screen.clear_screen()\n\n        goal = None\n        goal_x = None\n        goal_y = None\n\n        \n\n        #if find one or more goal, get the biggest goal info\n        if vision_20.largest_object() != None:\n\n            search_goal(goal_color)\n\n            goal_x = vision_20.largest_object().centerX\n            goal_y = vision_20.largest_object().centerY\n            brain.screen.print(\"goal_xy = (\",goal_x,\", \",goal_y,\")\")\n            brain.screen.next_row()\n            brain.screen.print(\"width:\",vision_20.largest_object().width)\n            brain.screen.next_row()\n            brain.screen.print(\"height:\",vision_20.largest_object().height)\n            brain.screen.next_row()\n\n            if goal_x < x_left:\n                move(\"left\",rotate_speed)\n                brain.screen.print(\"turn left\")\n                brain.screen.next_row()\n            elif goal_x > x_right:\n                move(\"right\",rotate_speed)\n                brain.screen.print(\"turn right\")\n                brain.screen.next_row()\n            else:\n                driveStop()\n\n                #use width to decide if the goal is far or near\n                if vision_20.largest_object().width < max_width:\n                    move(\"forward\",forward_speed)\n                    brain.screen.print(\"move forward\")\n                    brain.screen.next_row()\n                else:\n                    driveStop()\n                    brain.screen.print(\"stop moving\")\n                    brain.screen.next_row()\n\n        else:\n            search_goal(goal_color)\n\n            brain.screen.print(\"No Goal Detected\")\n            brain.screen.next_row()\n            #keep turning right until a goal is in the vision center\n            move(\"right\",rotate_speed)\n\n    \n\n\n#seach one color goal and turn left or right to focus the goal\ndef search_goal(color):\n\n    if (color == \"red\" or color == \"r\"):\n        goal = vision_20.take_snapshot(vision_20__RED_GOAL)\n        brain.screen.print(\"goal=\",goal)\n        brain.screen.next_row()\n    if (color == \"blue\" or color == \"b\"):\n        goal = vision_20.take_snapshot(vision_20__BLUE_GOAL)\n        brain.screen.print(\"goal=\",goal)\n        brain.screen.next_row()\n    if (color == \"yellow\" or color == \"y\"):\n        goal = vision_20.take_snapshot(vision_20__YELLOW_GOAL)\n        brain.screen.print(\"goal=\",goal)\n        brain.screen.next_row()\n    #wait(0.2,SECONDS)\n    \n    \n\ndef move(direction,speed_percent):\n    LeftDrive.set_velocity(speed_percent,PERCENT)\n    RightDrive.set_velocity(speed_percent,PERCENT)\n\n    if direction == \"left\" or direction == \"l\" or direction == \"L\":\n        LeftDrive.spin(REVERSE)\n        RightDrive.spin(FORWARD)\n    elif direction == \"right\" or direction == \"r\" or direction == \"R\":\n        LeftDrive.spin(FORWARD)\n        RightDrive.spin(REVERSE)\n    elif direction == \"forward\" or direction == \"f\" or direction == \"F\":\n        LeftDrive.spin(FORWARD)\n        RightDrive.spin(FORWARD)\n    elif direction == \"backward\" or direction == \"b\" or direction == \"B\":\n        LeftDrive.spin(REVERSE)\n        RightDrive.spin(REVERSE)\n\ndef driveStop():\n    LeftDrive.stop()\n    RightDrive.stop()\n\n# run the code\nwhen_started1()","textLanguage":"python","rconfig":[{"port":[3,13],"name":"BigArmLower","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[4,14],"name":"BigArmUpper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5,15],"name":"SmallArmLower","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[6,16],"name":"SmallArmUpper","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[20],"name":"vision_20","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"YELLOW_GOAL\",\"parameters\":{\"uMin\":47,\"uMax\":2501,\"uMean\":1274,\"vMin\":-3381,\"vMax\":-3063,\"vMean\":-3222,\"rgb\":1,\"type\":0,\"name\":\"YELLOW_GOAL\"},\"range\":5.8},{\"name\":\"RED_GOAL\",\"parameters\":{\"uMin\":4571,\"uMax\":8739,\"uMean\":6654,\"vMin\":-737,\"vMax\":-69,\"vMean\":-404,\"rgb\":1,\"type\":0,\"name\":\"RED_GOAL\"},\"range\":2.3},{\"name\":\"BLUE_GOAL\",\"parameters\":{\"uMin\":-2327,\"uMax\":-1637,\"uMean\":-1982,\"vMin\":8519,\"vMax\":11565,\"vMean\":10042,\"rgb\":1,\"type\":0,\"name\":\"BLUE_GOAL\"},\"range\":3.4},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22},{"port":[1,2],"name":"LeftDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[11,12],"name":"RightDrive","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20211210.18.00.00","appVersion":"2.3.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}